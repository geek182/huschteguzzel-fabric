- name: Create Jenkins updates folder.
  file:
    path: /var/lib/jenkins/updates
    owner: jenkins
    group: jenkins
    mode: 0755
    state: directory

- name: Wait untils Jenkins web API is available
  command: curl --head --silent {{ jenkins_base_url }}/
  register: result
  until: result.stdout.find("200 OK") != -1
  retries: 12
  delay: 5
  changed_when: false

- name: Stat old Jenkins plugin data.
  stat:
    path: "{{ jenkins_updates_json }}"
  register: jenkins_updates_json_old

- name: Update Jenkins plugin data.
  shell: curl -L {{ jenkins_updatecenter_url }} | sed '1d;$d' > {{ jenkins_updates_json }}
  sudo_user: jenkins
  changed_when: false

- name: Stat new Jenkins plugin data.
  stat:
    path: "{{ jenkins_updates_json }}"
  register: jenkins_updates_json_new

- name: Post updated plugin data to Jenkins.
  command: curl -X POST --data-binary @{{ jenkins_updates_json }} {{ jenkins_base_url }}/updateCenter/byId/default/postBack
  when: "not jenkins_updates_json_old.stat.exists or jenkins_updates_json_new.stat.checksum != jenkins_updates_json_old.stat.checksum"

- name: Get list of outdated plugins
  shell: "{{ jenkins_cli_command }} list-plugins | grep -e ')$' | awk '{ print $1 }'"
  register: outdated_plugins
  changed_when: outdated_plugins.stdout_lines

- name: Install additional Jenkins plugins.
  command: "{{ jenkins_cli_command }} install-plugin {{ item }}"
  args:
    creates: /var/lib/jenkins/plugins/{{ item }}.jpi
  with_items: jenkins_plugins
  notify: restart jenkins

- name: Update outdated Jenkins plugins.
  command: "{{ jenkins_cli_command }} install-plugin {{ item }}"
  with_items: outdated_plugins.stdout_lines
  notify: restart jenkins